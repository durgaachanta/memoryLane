{"version":3,"sources":["components/Header.js","components/TaskInput.js","components/TaskList.js","components/TaskListFilter.js","components/TaskApp.js","components/CounterApp.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","TaskInput","TaskList","taskList","map","task","index","TaskListFilter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","id","onClick","event","onClickEvent","React","Component","TaskApp","filterTasks","console","log","target","setState","filteredList","list","testArr","filter","status","concat","components_Header","components_TaskInput","components_TaskList","length","components_TaskListFilter","CounterApp","addNewCounter","counter","toConsumableArray","count","incrementCounter","idx","tempCounter","decrementCounter","className","App","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAUeA,EARA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBCKSC,EARG,SAACJ,GACjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBCQSE,EAXE,SAACL,GAEhB,OACEC,EAAAC,EAAAC,cAAA,WACGH,EAAMM,SAASC,IAAI,SAACC,EAAMC,GACzB,OAAOR,EAAAC,EAAAC,cAAA,UAAKK,EAAKA,UCkBVE,cAlBb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,MAAQ,GAFIP,wEAOV,IAAAQ,EAAAL,KACP,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQiB,GAAG,MAAMC,QAAS,SAACC,GAAYH,EAAKnB,MAAMuB,aAAaD,KAA/D,OACArB,EAAAC,EAAAC,cAAA,UAAQiB,GAAG,SAASC,QAAS,SAACC,GAAYH,EAAKnB,MAAMuB,aAAaD,KAAlE,UACArB,EAAAC,EAAAC,cAAA,UAAQiB,GAAG,YAAYC,QAAS,SAACC,GAAYH,EAAKnB,MAAMuB,aAAaD,KAArE,qBAjBqBE,IAAMC,WC2CpBC,cAtCb,SAAAA,EAAY1B,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,IACjBf,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAc,GAAAT,KAAAH,KAAMd,KAaR2B,YAAc,SAACL,GAEb,GADAM,QAAQC,IAAIP,EAAMQ,OAAOV,IACD,QAApBE,EAAMQ,OAAOV,GACfT,EAAKoB,SAAS,CAAEC,aAAcrB,EAAKO,MAAMe,WACpC,CACL,IAAIC,EAAUvB,EAAKO,MAAMe,KAAKE,OAAO,SAAAF,GAAI,OAAIA,EAAKG,SAAL,GAAAC,OAAmBf,EAAMQ,OAAOV,MAC7ET,EAAKoB,SAAS,CAAEC,aAAcE,MAlBhCvB,EAAKO,MAAQ,CACXe,KAAM,CAAC,CAAEzB,KAAM,qBAAsB4B,OAAQ,aAC7C,CAAE5B,KAAM,WAAY4B,OAAQ,UAC5B,CAAE5B,KAAM,gBAAiB4B,OAAQ,aACjC,CAAE5B,KAAM,sBAAuB4B,OAAQ,UACvC,CAAE5B,KAAM,WAAY4B,OAAQ,WAE5BJ,aAAc,IATCrB,wEA0BjB,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,CAAUlC,SAA6C,IAAnCQ,KAAKI,MAAMc,aAAaS,OAAe3B,KAAKI,MAAMe,KAAOnB,KAAKI,MAAMc,eACxF/B,EAAAC,EAAAC,cAACuC,EAAD,CAAgBpC,SAAUQ,KAAKI,MAAMe,KAAMV,aAAcT,KAAKa,sBAhChDH,IAAMC,mBC2CbkB,cA9Cb,SAAAA,EAAY3C,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMd,KAMR4C,cAAgB,WACdjC,EAAKoB,SAAS,CAAEc,QAAO,GAAAR,OAAAzB,OAAAkC,EAAA,EAAAlC,CAAMD,EAAKO,MAAM2B,SAAjB,CAA0B,CAAEE,MAAO,QARzCpC,EAYnBqC,iBAAmB,SAACC,GAClB,IAAIC,EAAcvC,EAAKO,MAAM2B,QAC7BK,EAAYD,GAAKF,QACjBpC,EAAKoB,SAAS,CAAEc,QAASK,KAfRvC,EAmBnBwC,iBAAmB,SAACF,GAClB,IAAIC,EAAcvC,EAAKO,MAAM2B,QAC7BK,EAAYD,GAAKF,QACjBpC,EAAKoB,SAAS,CAAEc,QAASK,KApBzBvC,EAAKO,MAAQ,CACX2B,QAAS,IAHMlC,wEAyBV,IAAAQ,EAAAL,KACP,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQiD,UAAU,MAAM/B,QAASP,KAAK8B,eAAtC,cACC9B,KAAKI,MAAM2B,QAAQtC,IAAI,SAACwC,EAAOE,GAG9B,OACEhD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,cACbnD,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,OAAjB,aAAkCH,GAClChD,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,OAAjB,eAAoCL,EAAMA,OAC1C9C,EAAAC,EAAAC,cAAA,UAAQiD,UAAU,MAAM/B,QAAS,WAAQF,EAAK6B,iBAAiBC,KAA/D,qBACAhD,EAAAC,EAAAC,cAAA,UAAQiD,UAAU,MAAM/B,QAAS,WAAQF,EAAKgC,iBAAiBF,KAA/D,gCAtCWzB,IAAMC,WC6BhB4B,0LAlBX,OACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OAEbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,aACZnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,OAAMnD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAMF,UAAU,YAAYG,GAAG,YAA/B,aACpBtD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,OAAMnD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAMF,UAAU,YAAYG,GAAG,eAA/B,gBAGtBtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWjC,IACxCzB,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWhB,aAZ7BlB,cCCEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7180b915.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n  return (\n    <div>\n      <h1>todos</h1>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nconst TaskInput = (props) => {\n  return (\n    <div>\n      <input />\n    </div>\n  );\n};\n\nexport default TaskInput;","import React from 'react';\n\nconst TaskList = (props) => {\n\n  return (\n    <div>\n      {props.taskList.map((task, index) => {\n        return <li>{task.task}</li>\n      })}\n    </div>\n  )\n}\n\nexport default TaskList;","import React from 'react';\n\nclass TaskListFilter extends React.Component {\n  // import Header from './Header';\n  // import TaskInput from './TaskInput';\n  // import TaskList from './TaskList';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n\n  render() {\n    return (\n      <div>\n        <button id='all' onClick={(event) => { this.props.onClickEvent(event) }}>All</button>\n        <button id='active' onClick={(event) => { this.props.onClickEvent(event) }}>Active</button>\n        <button id='completed' onClick={(event) => { this.props.onClickEvent(event) }}>Completed</button>\n      </div>\n    )\n  }\n}\n\nexport default TaskListFilter;\n","import React from 'react';\nimport Header from './Header';\nimport TaskInput from './TaskInput';\nimport TaskList from './TaskList';\nimport TaskListFilter from './TaskListFilter';\n\nclass TaskApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [{ task: 'Absolutly anything', status: 'completed' },\n      { task: 'be aware', status: 'active' },\n      { task: 'call your mom', status: 'completed' },\n      { task: 'do things somewhere', status: 'active' },\n      { task: 'eat food', status: 'active' }\n      ],\n      filteredList: [],\n    };\n  };\n\n\n  filterTasks = (event) => {\n    console.log(event.target.id);\n    if (event.target.id === 'all') {\n      this.setState({ filteredList: this.state.list });\n    } else {\n      let testArr = this.state.list.filter(list => list.status === `${event.target.id}`);\n      this.setState({ filteredList: testArr });\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <TaskInput />\n        <TaskList taskList={this.state.filteredList.length === 0 ? this.state.list : this.state.filteredList} />\n        <TaskListFilter taskList={this.state.list} onClickEvent={this.filterTasks} />\n      </div>\n    )\n  }\n\n}\n\nexport default TaskApp;","import React from 'react';\n\nclass CounterApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: [],\n    };\n  }\n  // to add a new counter\n  addNewCounter = () => {\n    this.setState({ counter: [...this.state.counter, { count: 0 }] })\n\n  }\n  // increment a particular counter\n  incrementCounter = (idx) => {\n    let tempCounter = this.state.counter;\n    tempCounter[idx].count++;\n    this.setState({ counter: tempCounter });\n  }\n\n  //decrement a particular counter\n  decrementCounter = (idx) => {\n    let tempCounter = this.state.counter;\n    tempCounter[idx].count--;\n    this.setState({ counter: tempCounter });\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"btn\" onClick={this.addNewCounter}>AddCounter</button>\n        {this.state.counter.map((count, idx) => {\n          // console.log(count);\n          // console.log(idx);\n          return (\n            <div className=\"counterdiv\">\n              <label className=\"lbl\">Counter - {idx}</label>\n              <label className=\"lbl\">Count is  - {count.count}</label>\n              <button className=\"btn\" onClick={() => { this.incrementCounter(idx) }}>Increment Counter</button>\n              <button className=\"btn\" onClick={() => { this.decrementCounter(idx) }}>Decrement Counter</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CounterApp;","import React, { Component } from 'react';\n//import the components needed for routing\nimport \"react-router\";\n//to import react-router-dom we need react-router first\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport TaskApp from './components/TaskApp';\nimport CounterApp from './components/CounterApp';\n\n//import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          {/* Navigation menu - appends to the end of our url - just like a tags*/}\n          <ul className=\"navheader\">\n            <li className=\"nav\"><Link className=\"linkclass\" to=\"/taskapp\">ToDoList</Link></li>\n            <li className=\"nav\"><Link className=\"linkclass\" to=\"/counterapp\">CounterApp</Link></li>\n          </ul>\n          {/* Routing */}\n          <Route exact path=\"/taskapp\" component={TaskApp} />\n          <Route path=\"/counterapp\" component={CounterApp} />\n\n        </div >\n      </BrowserRouter >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}